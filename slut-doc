#!/usr/bin/env node

'use strict';

var fs = require('fs');
var fileHelper = require('./file-helper');
var docBlocks = require('./doc-blocks');
var util = require('./util');

// ================================================

var docBlockRegex = /\/\*{2,}(.|[\r\n])+?\*\//g;

/**
* @description generate the API docs
* @method go
* @param {String} [directory = process.cwd()]
* @public
*/
var go = function (directory) {
    
    // find the files
    var files = fileHelper.getFiles(directory, null, true).files;

    // find the blocks in each
    var blocks = getBlocksFromFiles(files);

    var result = stringify(blocks);

    fs.writeFileSync('api.md', result);
};

/**
* @description get the DocBlocks from an Array of files
* @function getBlocksFromFiles
* @param {String[]} filePaths
* @return {DocBlock[]}
* @private
*/
var getBlocksFromFiles = function (filePaths) {
    var i, max, result = [];

    var getBlocks = function (rawBlocks, filePath) {
        var blocks = [];

        util.each(rawBlocks, function (block, i) {
            blocks.push(
                new docBlocks.DocBlock(block, filePath)
            );
        });

        return blocks;
    };

    util.each(filePaths, function (filePath) {
        var rawBlocks = fileHelper.getMatches(filePath, docBlockRegex);

        result = result.concat(getBlocks(rawBlocks, filePath));
    });

    return result;
};

/**
* @description get the result of bunch of
* stringified DocBlocks
* @function stringify
* @param {DocBlock[]} blocks
* @return {String}
* @private
*/
var stringify = function (blocks) {
    var str = '';

    util.each(blocks, function (block) {
        str += block.stringify();
    });  

    return str;
};

// ================================================

var dir = process.argv[2];

if (dir && dir !== '--reporter') {
    go(dir);
} else {
    exports.go = go;
}