#!/usr/bin/env node

'use strict';

var fs = require('fs');
var fileHelper = require('./file-helper');
var docBlocks = require('./doc-blocks');

// ================================================

var docBlockRegex = /\/\*{2,}(.|[\r\n])+?\*\//g;
var blockDescRegex = /\/\*{2,}(.|[\r\n])+?(?=\* @)/g;


/**
* Iterate over an Array.
* @param {Array} collection
* @param {Function} fn - item, index
* @private
*/
var each = function (collection, fn) {
    var i, max;

    if (collection && collection.length) {
        for (i = 0, max = collection.length; i < max; i++) {
            fn(collection[i]);
        }
    }
};

/**
* @param {String} filePath
* @return {String[]}
* @private
*/
var getRawBlocksFromFile = function (filePath) {
    var text = fs.readFileSync(filePath, 'utf-8');
    return findBlocks(text);
};

/**
* Convert a raw doc block into a standard object.
* @param {String} rawBlock
* @return {DocBlock}
* @private
*/
var getBlockObject = function (rawBlock) {
    return new docBlocks.DocBlock(rawBlock);
};

/**
* @param {String[]} filePaths
* @return {String[]} blocks
* @private
*/
var getBlocksFromFiles = function (filePaths) {
    var i, max, blocks = [];

    var rawBlocks;

    var getBlocks = function (rawBlocks) {
        var blocks = [];

        each(rawBlocks, function (block, i) {
            blocks.push(getBlockObject(block));
        });

        return blocks;
    };

    for (i = 0, max = filePaths.length; i < max; i++) {
        rawBlocks = getRawBlocksFromFile(filePaths[i]);
        blocks = blocks.concat(getBlocks(rawBlocks));
    }

    return blocks;
};

/**
* Find blocks of documentation (doc block).
* @param {String} text
* @param {RegExp} [pattern = /\/\*{2,}.+\*\//g]
* @return {String[]}
* @private
*/
var findBlocks = function (text, pattern) {
    var blocks = [];
    pattern = pattern || docBlockRegex;

    blocks = text.match(pattern);

    return blocks || [];
};

/**
* @param {String} block
* @return {String}
*/
var getBlockDescription = function (block) {
    var desc = block.match(blockDescRegex);

    // remove all the junk before and after the description
    if (desc) {
        desc = desc[0].replace(/\/\*{2,}(.|[\r\n])+?(?=[a-z])/gi, '').trim();
    }

    return desc || '';
};

/**
* @param {DocBlock[]} blocks
* @return {String}
*/
var stringify = function (blocks) {
    var str = '';

    each(blocks, function (block) {
        str += block.stringify();
    });  

    return str;
};

/**
* @param {String} [directory = process.cwd()]
*/
var main = function (directory) {
    
    // find the files
    var files = fileHelper.getFiles(directory, null, true).files;

    // find the blocks in each
    var blocks = getBlocksFromFiles(files);

    var result = stringify(blocks);
};

// ================================================

exports.main = main;

// TODO: These should not be public.  This is only for testing.
exports.findBlocks = findBlocks;
exports.getBlockDescription = getBlockDescription;