#!/usr/bin/env node

'use strict';

var swig = require('swig');
var fs = require('fs');
var fileHelper = require('./file-helper');
var docBlocks = require('./doc-blocks');
var util = require('./util');
var path = require('path');
var fs = require('fs');

// ================================================

var settings = {
    docBlockRegex: /\/\*{2,}(.|[\r\n])+?\*\//g,

    // TODO: This should be pulled from .whatsupdocrc.
    destinationFile: path.join(process.cwd(), 'README.md')
};

/**
* @description generate the API docs
* @method go
* @param {String} [directory = process.cwd()]
* @public
*/
var go = function (directory) {
    
    // find the files
    var files = fileHelper.getFiles(directory, null, true).files;

    // find the blocks in each
    var blocks = getBlocksFromFiles(files);

    blocks = groupBlocks(blocks);

    var result = stringify(blocks);

    writeResults(result);
};

/**
* @name writeResults
* @description Writes the api doc string into the
* destination file.
* @param {String} results
* @private
*/
var writeResults = function (results) {
    var destinationFile = settings.destinationFile;
    var destinationText = fileHelper.readFileSync(destinationFile);
    var newText = insertDocs(destinationText, results);
    fs.writeFileSync(destinationFile, newText);
};

/**
* @name insertDocs
* @description Inserts docs at the proper place into another string.
* This will replace old docs if found.
* @param {String} target the string docs will be inserted into
* @param {String} docs
* @return {String} updated the updated target 
* @private
*/
var insertDocs = function (target, docs) {
    var regex = /<!--- whatsupdoc-start(\n|.)+whatsupdoc-end -->\n/g;

    if (regex.test(target)) {
        target = target.replace(regex, docs);
    } else {
        target += docs;
    }

    return target;
};

/**
* @name groupBlocks
* @description group blocks by privacy
* @param {DocBlock[]} blocks
* @return {Object}
*/
var groupBlocks = function (blocks) {
    var grouped = {
        'public': [],
        'protected': [],
        'private': [],
        '': []
    };

    util.each(blocks, function (block) {
        var which = '';

        if (block.public) {
            which = 'public';
        } else if (block.protected) {
            which = 'protected';
        } else if (block.private) {
            which = 'private';
        }

        grouped[which].push(block);
    });

    return grouped;
};

/**
* @description get the DocBlocks from an Array of files
* @function getBlocksFromFiles
* @param {String[]} filePaths
* @return {DocBlock[]}
* @private
*/
var getBlocksFromFiles = function (filePaths) {
    var i, max, result = [];

    var getBlocks = function (rawBlocks, filePath) {
        var blocks = [];

        util.each(rawBlocks, function (block, i) {
            blocks.push(
                new docBlocks.DocBlock(block, filePath)
            );
        });

        return blocks;
    };

    util.each(filePaths, function (filePath) {
        var rawBlocks = fileHelper.getMatches(filePath, settings.docBlockRegex);

        result = result.concat(getBlocks(rawBlocks, filePath));
    });

    return result;
};

/**
* @description get the result of bunch of
* stringified DocBlocks
* @function stringify
* @param {Object} groupedBlocks
* @return {String}
* @private
*/
var stringify = function (groupedBlocks) {
    var result = '';

    util.each(groupedBlocks, function (blocks, privacy) {
        var str = '';

        util.each(blocks, function (block) {
            str += block.stringify();
        });

        groupedBlocks[privacy] = str;
    });

    // Now that we've got each group stringified, load up
    // the main template.

    var templateFilePath = path.join(__dirname, 'template.txt');
    var template = swig.compileFile(templateFilePath);

    groupedBlocks.foo = 'hello';

    return template({
        'private': groupedBlocks.private,
        'protected': groupedBlocks.protected,
        'public': groupedBlocks.public,
        '': groupedBlocks['']
    });
};

/**
* @name configure
* @description Configure global settings.
* @param 
* @public {String} name setting name
* @public value setting value
*/
var configure = function (name, value) {
    settings[name] = value;
};

// ================================================

// TODO: Figure out a better way to determine if
// this is being used from CLI or required in 
// another script.

var dir = process.argv[2];

if (dir && dir !== '--reporter') {
    go(dir);
} else {
    exports.go = go;
    exports.configure = configure;
}